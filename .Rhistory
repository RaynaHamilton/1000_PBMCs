annotate(geom="text",x=4500,y=1,label="x=4300")
#novelty score(genes per UMI).  .8 is expected for good quality cells
metadata%>%ggplot(aes(x=log10GenesPerUMI))+geom_density(alpha=0.2)+
theme_classic()+ylab("Cell Density")+geom_vline(xintercept=0.82)+annotate(geom="text",x=.83,y=5,label="x=82")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle("Genes per UMI")
#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=3000)+annotate(geom="text",x=4000,y=1,label="x=3000")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))
#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=3000)+annotate(geom="text",x=4000,y=1,label="x=3000")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))+geom_vline(xintercept=15000)
#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=3000)+annotate(geom="text",x=4000,y=1,label="x=3000")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))+geom_vline(xintercept=16000)
#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=3000)+annotate(geom="text",x=4000,y=1,label="x=3000")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))+geom_vline(xintercept=18000)
#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=3000)+annotate(geom="text",x=4000,y=1,label="x=3000")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))+geom_vline(xintercept=20000)
#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=3000)+annotate(geom="text",x=4000,y=1,label="x=3000")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))+geom_vline(xintercept=19000)
+geom_vline(xintercept=19000)+annotate(geom="text",x=2000,y=1,label="x=19000")
#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=3000)+annotate(geom="text",x=4000,y=1,label="x=3000")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))+
geom_vline(xintercept=19000)+annotate(geom="text",x=20000,y=1,label="x=19000")
#filter - adjust these thresholds according to your application
#it is best to consider all metrics, not just one of above in isolation, to avoid excluding viable cells
filtered_seurat <- subset(x=pbmcs,subset=(nUMI>=3000)&(nGene<=4200)&
(nGene>=2000)&(nGene<=19000)&(log10GenesPerUMI>0.82)&
(mitoRatio<0.2))
print(paste(nrow(filtered_seurat@meta.data),"cells of 1000 cells expected."))
# reading in Seurat object for 1000 PBMC scRNA-seq data, then QC to remove low-
# quality cells, debris and doublets etc.
#https://hbctraining.github.io/scRNA-seq_online/lessons/03_SC_quality_control-setup.html
library(SingleCellExperiment)
library(Seurat)
library(tidyverse)
library(Matrix)
library(scales)
library(cowplot)
library(RCurl)
#read count in as a sparse matrix as there are lots of 0s in this datatype
# Create a Seurat object for each sample
seurat_data <- Read10X(data.dir = paste0("data/raw_feature_bc_matrix"))
pbmcs <- CreateSeuratObject(counts = seurat_data,
min.features = 200)#min.features is min genes detected to not be filtered out as a low quality cell
head(pbmcs)
view(pbmcs@meta.data) #each row is a cell (barcode), with specified number of RNAs and unique RNAs/UMIs
#https://hbctraining.github.io/scRNA-seq_online/lessons/04_SC_quality_control.html
#calculate novelty score-number of genes per UMI
pbmcs$log10GenesPerUMI <- log10(pbmcs$nFeature_RNA)/log10(pbmcs$nCount_RNA)
#determine proportion of trascripts that map to mitochondrial genes - should be low for healthy cells
pbmcs$mitoRatio <- PercentageFeatureSet(object=pbmcs,pattern="^MT-") #pattern may be different for nonhuman organisms. Start by trying MT, Mt, mt
pbmcs$mitoRatio <- pbmcs@meta.data$mitoRatio/100
metadata <- pbmcs@meta.data
metadata$cells <- rownames(metadata)
#rename columns
metadata <- metadata%>%dplyr::rename(seq_folder=orig.ident,nUMI=nCount_RNA,
nGene=nFeature_RNA)
pbmcs@meta.data <- metadata
save(pbmcs,file="data/filtered_seurat.RData")
print(paste(nrow(pbmcs@meta.data),"cells of 1000 cells expected.")) #1215 cells after filtering
#now use visualizations to decide which cells to remove
dir.create("plots")
#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=3000)+annotate(geom="text",x=4000,y=1,label="x=3000")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))+
geom_vline(xintercept=19000)+annotate(geom="text",x=20000,y=1,label="x=19000")
ggsave("plots/initial_UMI_density.png")
#genes per cell.  should be one peak, usually not bimodal with a shoulder
# (bimodal indicates failure or very different types/proportions of cells)
metadata%>%ggplot(aes(x=nGene))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=2000)+annotate(geom="text",x=2500,y=1,label="x=2000")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("Genes per",nrow(pbmcs@meta.data), "Cells"))+geom_vline(xintercept=4300)+
annotate(geom="text",x=4500,y=1,label="x=4300")
#I have added two thresholds to filter out cells with very few genes and likely doublets
ggsave("plots/initial_gene_density.png")
#novelty score(genes per UMI).  .8 is expected for good quality cells
metadata%>%ggplot(aes(x=log10GenesPerUMI))+geom_density(alpha=0.2)+
theme_classic()+ylab("Cell Density")+geom_vline(xintercept=0.82)+annotate(geom="text",x=.83,y=5,label="x=0.82")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle("Genes per UMI")
ggsave("plots/initial_genes_per_UMI.png")
#mitochondrial ratio, should be below .2 usually
ggplot(metadata,aes(x=mitoRatio)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
theme_classic() +
geom_vline(xintercept = 0.2)+annotate(geom="text",x=0.25,y=1,label="x=0.2")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("Mitochondrial Ratio per",nrow(pbmcs@meta.data), "Cells"))
ggsave("plots/initial_mitochondrial_ratio.png")
ggplot(metadata,aes(x=nUMI,y=nGene,color=mitoRatio))+
geom_point()+scale_colour_gradient(low="gray90",high="black")+
stat_smooth(method=lm)+scale_x_log10()+scale_y_log10()+theme_classic()+
geom_vline(xintercept=500)+geom_hline(yintercept=250)+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle("Initial nGenes vs nUMIs")
ggsave("plots/initial_nGenes_vs_nUMIs.png")
#bottom right cells below blue line could be dying or low complexity like RBCs
#bottom left are likely poor quality cells
#note mitochondrial reads are only a significant proportion in low count cells
#filter - adjust these thresholds according to your application
#it is best to consider all metrics, not just one of above in isolation, to avoid excluding viable cells
filtered_seurat <- subset(x=pbmcs,subset=(nUMI>=3000)&(nGene<=4200)&
(nGene>=2000)&(nGene<=19000)&(log10GenesPerUMI>0.82)&
(mitoRatio<0.2))
print(paste(nrow(filtered_seurat@meta.data),"cells of 1000 cells expected."))
#we are down to 1094 cells - we could be more stringent with our thresholds, but
# the remaining cells do all seem good quality, and based on my experimentation
# this number could only be reduced more by excluding likely viable cells
#remove genes with 0 counts so they don't reduce average expression
counts <- GetAssayData(object=filtered_seurat,slot="counts")
nonzero <- counts>0
#remove genes expressed in 10 or fewer cells
keep_genes <- Matrix::rowSums(nonzero)>=10
filtered_counts <- counts[keep_genes,]
filtered_seurat <- CreateSeuratObject(filtered_counts,meta.data=filtered_seurat@meta.data)
save(filtered_seurat, file="data/seurat_filtered.RData")
library(Seurat)
library(tidyverse)
library(RCurl)
library(cowplot)
library(AnnotationHub)
#filtered_seurat <- load("data/seurat_filtered.RData")
load("data/cycle.rda")
seurat_phase <- NormalizeData(filtered_seurat) #log normalization
seurat_phase <- CellCycleScoring(seurat_phase,g2m.features=g2m_genes,
s.features=s_genes)
#note # of PCs=# of cells
#before PCA we must scale the data since by default the most expressed genes will
#be the most variable otherwise
#find most variable genes
seurat_phase <- FindVariableFeatures(seurat_phase,selection.method="vst",
nfeatures=2000,verbose=FALSE)
#scale counts
seurat_phase <- ScaleData(seurat_phase)
#now PCA...
seurat_phase <- RunPCA(seurat_phase)
DimPlot(seurat_phase,reduction="pca",group.by="Phase",split.by="Phase")+ggtitle("PCA plot by Cell Cycle Phase")
#Could regress out cell cycle, but it seems a bit unecessary here
# The PCA biplots look essentially identical regardless of cell cycle phase, so
# we will not regress this out
ggsave("plots/cell_cycle_PCA.png")
#deciding whether to regress out mitochondrial expression...
summary(seurat_phase@meta.data$mitoRatio)
as.numeric(summary(seurat_phase@meta.data$mitoRatio))
as.numeric(summary(seurat_phase@meta.data$mitoRatio))[c(2,3,5)]
c(-Inf,as.numeric(summary(seurat_phase@meta.data$mitoRatio))[c(2,3,5)],Inf)
paste(-Inf,as.numeric(summary(seurat_phase@meta.data$mitoRatio))[c(2,3,5)],Inf)
#now cut based on quartile values
seurat_phase@meta.data$mitoFr <- cut(seurat_phase@meta.data$mitoRatio,
breaks=c(-Inf,as.numeric(summary(seurat_phase@meta.data$mitoRatio))[c(2,3,5)],Inf),
labels=c("Low","Medium","Medium high","High"))
DimPlot(seurat_phase,reduction="pca",group.by="mitoFr",split.by="mitoFr")+ggtitle("PCA plot by Mitochondrial Ratio")
#wow those look exactly the same
ggsave("plots/mitoRatio_PCA.png")
seurat_phase <- SCTransform(seurat_phase, vars.to.regress = c("mitoRatio"))
seurat_phase@assays#top 10 variable features
saveRDS(seurat_phase, "data/seurat_post_PCA.rds")
seurat_phase
seurat_phase@counts
seurat_phase@RNA
library(Seurat)
library(tidyverse)
library(RCurl)
library(cowplot)
seurat_phase <- RunUMAP(seurat_phase,
dims = 1:40,
reduction = "pca")
#seurat_phase <- readRDS("./results/integrated_seurat.rds")
#heatmap to help determine how many PCs to use when differentiating cell types
DimHeatmap(seurat_phase,nfeatures=20,dims=1:9,cells=500,balanced=TRUE,fast=FALSE)+theme(axis.text.y = element_text(size = 1))
#cells is nunmber of cells with the most negative or positive scores to use
## Printing out the most variable genes driving PCs
print(x=seurat_phase[["pca"]],dims=1:10,nfeatures=5)
#finnd neighbours, then graph-based clusters
#resolution between .4 and 1.4 is good for 3000-5000 cells, try a few values
seurat_phase <- FindNeighbors(object=seurat_phase,dims=1:40)
seurat_phase <- FindClusters(object=seurat_phase,resolution=c(0.4,0.6,0.8,1,1.2,1.4))
seurat_phase <- NormalizeData(filtered_seurat) #log normalization
seurat_phase <- CellCycleScoring(seurat_phase,g2m.features=g2m_genes,
s.features=s_genes)
#note # of PCs=# of cells
#before PCA we must scale the data since by default the most expressed genes will
#be the most variable otherwise
#find most variable genes
seurat_phase <- FindVariableFeatures(seurat_phase,selection.method="vst",
nfeatures=2000,verbose=FALSE)
#scale counts
seurat_phase <- ScaleData(seurat_phase)
#now PCA...
seurat_phase <- RunPCA(seurat_phase)
DimPlot(seurat_phase,reduction="pca",group.by="Phase",split.by="Phase")+ggtitle("PCA plot by Cell Cycle Phase")
# The PCA biplots look essentially identical regardless of cell cycle phase, so
# we will not regress this out
ggsave("plots/cell_cycle_PCA.png")
#deciding whether to regress out mitochondrial expression...
summary(seurat_phase@meta.data$mitoRatio)
#now cut based on quartile values
seurat_phase@meta.data$mitoFr <- cut(seurat_phase@meta.data$mitoRatio,
breaks=c(-Inf,as.numeric(summary(seurat_phase@meta.data$mitoRatio))[c(2,3,5)],Inf),
labels=c("Low","Medium","Medium high","High"))
DimPlot(seurat_phase,reduction="pca",group.by="mitoFr",split.by="mitoFr")+ggtitle("PCA plot by Mitochondrial Ratio")
# These look similar, but I will regress out mitoRatio in this case as the left
# cluster seems to be much less abundant at lower mitoRatios
ggsave("plots/mitoRatio_PCA.png")
#now normalize and regress with SCTransform
seurat_phase <- SCTransform(seurat_phase, vars.to.regress = c("mitoRatio"))
seurat_phase@assays#top 10 variable features
saveRDS(seurat_phase, "data/seurat_post_PCA.rds")
#to load use split_seurat <- readRDS("data/split_seurat_regressed.rds")
#https://hbctraining.github.io/scRNA-seq_online/lessons/06_integration.html
#integration follows normalization if you have multiple samples to compare
seurat_phase <- RunUMAP(seurat_phase,
dims = 1:40,
reduction = "pca")
#seurat_phase <- readRDS("./results/integrated_seurat.rds")
#heatmap to help determine how many PCs to use when differentiating cell types
DimHeatmap(seurat_phase,nfeatures=20,dims=1:9,cells=500,balanced=TRUE,fast=FALSE)+theme(axis.text.y = element_text(size = 1))
# Normalize scRNA-seq Seurat object and check for uninteresting variables to regress out if necessary
# this file should be run after quality_control.R
#https://hbctraining.github.io/scRNA-seq_online/lessons/06_SC_SCT_normalization.html
# Load libraries
library(Seurat)
library(tidyverse)
library(RCurl)
library(cowplot)
library(AnnotationHub)
#filtered_seurat <- load("data/seurat_filtered.RData")
load("data/cycle.rda")
seurat_phase <- NormalizeData(filtered_seurat) #log normalization
seurat_phase <- CellCycleScoring(seurat_phase,g2m.features=g2m_genes,
s.features=s_genes)
#note # of PCs=# of cells
#before PCA we must scale the data since by default the most expressed genes will
#be the most variable otherwise
#find most variable genes
seurat_phase <- FindVariableFeatures(seurat_phase,selection.method="vst",
nfeatures=2000,verbose=FALSE)
#scale counts
seurat_phase <- ScaleData(seurat_phase)
#now PCA...
seurat_phase <- RunPCA(seurat_phase)
DimPlot(seurat_phase,reduction="pca",group.by="Phase",split.by="Phase")+ggtitle("PCA plot by Cell Cycle Phase")
# The PCA biplots look essentially identical regardless of cell cycle phase, so
# we will not regress this out
ggsave("plots/cell_cycle_PCA.png")
#deciding whether to regress out mitochondrial expression...
summary(seurat_phase@meta.data$mitoRatio)
#now cut based on quartile values
seurat_phase@meta.data$mitoFr <- cut(seurat_phase@meta.data$mitoRatio,
breaks=c(-Inf,as.numeric(summary(seurat_phase@meta.data$mitoRatio))[c(2,3,5)],Inf),
labels=c("Low","Medium","Medium high","High"))
DimPlot(seurat_phase,reduction="pca",group.by="mitoFr",split.by="mitoFr")+ggtitle("PCA plot by Mitochondrial Ratio")
# These look similar, but I will regress out mitoRatio in this case as the left
# cluster seems to be much less abundant at lower mitoRatios
ggsave("plots/mitoRatio_PCA.png")
#now normalize and regress with SCTransform
#seurat_phase <- SCTransform(seurat_phase, vars.to.regress = c("mitoRatio"))
seurat_phase@assays#top 10 variable features
saveRDS(seurat_phase, "data/seurat_post_PCA.rds")
seurat_phase <- RunUMAP(seurat_phase,
dims = 1:40,
reduction = "pca")
#seurat_phase <- readRDS("./results/integrated_seurat.rds")
#heatmap to help determine how many PCs to use when differentiating cell types
DimHeatmap(seurat_phase,nfeatures=20,dims=1:9,cells=500,balanced=TRUE,fast=FALSE)+theme(axis.text.y = element_text(size = 1))
ggsave("plots/PCA_heatmap.png")
#cells is nunmber of cells with the most negative or positive scores to use
## Printing out the most variable genes driving PCs
print(x=seurat_phase[["pca"]],dims=1:10,nfeatures=5)
#finnd neighbours, then graph-based clusters
#resolution between .4 and 1.4 is good for 3000-5000 cells, try a few values
seurat_phase <- FindNeighbors(object=seurat_phase,dims=1:40)
seurat_phase <- FindClusters(object=seurat_phase,resolution=c(0.4,0.6,0.8,1,1.2,1.4))
seurat_phase
SCTransform(seurat_phase, vars.to.regress = c("mitoRatio"))
seurat_phase <- RunUMAP(seurat_phase,
dims = 1:40,
reduction = "pca")
runUMAP(SCTransform(seurat_phase, vars.to.regress = c("mitoRatio")),dims=1:40,reduction="pca")
RunUMAP(SCTransform(seurat_phase, vars.to.regress = c("mitoRatio")),dims=1:40,reduction="pca")
load("data/cycle.rda")
seurat_phase <- NormalizeData(filtered_seurat) #log normalization
seurat_phase <- CellCycleScoring(seurat_phase,g2m.features=g2m_genes,
s.features=s_genes)
#note # of PCs=# of cells
#before PCA we must scale the data since by default the most expressed genes will
#be the most variable otherwise
#find most variable genes
seurat_phase <- FindVariableFeatures(seurat_phase,selection.method="vst",
nfeatures=2000,verbose=FALSE)
#scale counts
seurat_phase <- ScaleData(seurat_phase)
#now PCA...
seurat_phase <- RunPCA(seurat_phase)
DimPlot(seurat_phase,reduction="pca",group.by="Phase",split.by="Phase")+ggtitle("PCA plot by Cell Cycle Phase")
# The PCA biplots look essentially identical regardless of cell cycle phase, so
# we will not regress this out
ggsave("plots/cell_cycle_PCA.png")
#deciding whether to regress out mitochondrial expression...
summary(seurat_phase@meta.data$mitoRatio)
#now cut based on quartile values
seurat_phase@meta.data$mitoFr <- cut(seurat_phase@meta.data$mitoRatio,
breaks=c(-Inf,as.numeric(summary(seurat_phase@meta.data$mitoRatio))[c(2,3,5)],Inf),
labels=c("Low","Medium","Medium high","High"))
DimPlot(seurat_phase,reduction="pca",group.by="mitoFr",split.by="mitoFr")+ggtitle("PCA plot by Mitochondrial Ratio")
# These look similar, but I will regress out mitoRatio in this case as the left
# cluster seems to be much less abundant at lower mitoRatios
ggsave("plots/mitoRatio_PCA.png")
#now normalize and regress with SCTransform
seurat_phase <- SCTransform(seurat_phase, vars.to.regress = c("mitoRatio"))
seurat_phase@assays#top 10 variable features
saveRDS(seurat_phase, "data/seurat_post_PCA.rds")
seurat_phase <- RunUMAP(seurat_phase,
dims = 1:40,
reduction = "pca")
#seurat_phase <- readRDS("./results/integrated_seurat.rds")
#heatmap to help determine how many PCs to use when differentiating cell types
DimHeatmap(seurat_phase,nfeatures=20,dims=1:9,cells=500,balanced=TRUE,fast=FALSE)+theme(axis.text.y = element_text(size = 1))
#can also use elbow plot to identify variation threshold
ElbowPlot(object=seurat_phase,ndims=40)
#finnd neighbours, then graph-based clusters
#resolution between .4 and 1.4 is good for 3000-5000 cells, try a few values
seurat_phase <- FindNeighbors(object=seurat_phase,dims=1:40)
seurat_phase <- FindClusters(object=seurat_phase,resolution=c(0.4,0.6,0.8,1,1.2,1.4))
# Normalize scRNA-seq Seurat object and check for uninteresting variables to regress out if necessary
# this file should be run after quality_control.R
#https://hbctraining.github.io/scRNA-seq_online/lessons/06_SC_SCT_normalization.html
# Load libraries
library(Seurat)
library(tidyverse)
library(RCurl)
library(cowplot)
library(AnnotationHub)
#filtered_seurat <- load("data/seurat_filtered.RData")
load("data/cycle.rda")
seurat_phase <- NormalizeData(filtered_seurat) #log normalization
seurat_phase <- CellCycleScoring(seurat_phase,g2m.features=g2m_genes,
s.features=s_genes)
#note # of PCs=# of cells
#before PCA we must scale the data since by default the most expressed genes will
#be the most variable otherwise
#find most variable genes
seurat_phase <- FindVariableFeatures(seurat_phase,selection.method="vst",
nfeatures=2000,verbose=FALSE)
#scale counts
seurat_phase <- ScaleData(seurat_phase)
#now PCA...
seurat_phase <- RunPCA(seurat_phase)
DimPlot(seurat_phase,reduction="pca",group.by="Phase",split.by="Phase")+ggtitle("PCA plot by Cell Cycle Phase")
# The PCA biplots look essentially identical regardless of cell cycle phase, so
# we will not regress this out
ggsave("plots/cell_cycle_PCA.png")
#deciding whether to regress out mitochondrial expression...
summary(seurat_phase@meta.data$mitoRatio)
#now cut based on quartile values
seurat_phase@meta.data$mitoFr <- cut(seurat_phase@meta.data$mitoRatio,
breaks=c(-Inf,as.numeric(summary(seurat_phase@meta.data$mitoRatio))[c(2,3,5)],Inf),
labels=c("Low","Medium","Medium high","High"))
DimPlot(seurat_phase,reduction="pca",group.by="mitoFr",split.by="mitoFr")+ggtitle("PCA plot by Mitochondrial Ratio")
ggsave("plots/mitoRatio_PCA.png")
library(Seurat)
library(tidyverse)
library(RCurl)
library(cowplot)
seurat_phase <- RunUMAP(seurat_phase,
dims = 1:40,
reduction = "pca")
#seurat_phase <- readRDS("./results/integrated_seurat.rds")
#heatmap to help determine how many PCs to use when differentiating cell types
DimHeatmap(seurat_phase,nfeatures=20,dims=1:9,cells=500,balanced=TRUE,fast=FALSE)+theme(axis.text.y = element_text(size = 1))
ggsave("plots/PCA_heatmap.png")
#cells is nunmber of cells with the most negative or positive scores to use
## Printing out the most variable genes driving PCs
print(x=seurat_phase[["pca"]],dims=1:10,nfeatures=5)
#can also use elbow plot to identify variation threshold
#ElbowPlot(object=seurat_phase,ndims=40)
#finnd neighbours, then graph-based clusters
#resolution between .4 and 1.4 is good for 3000-5000 cells, try a few values
seurat_phase <- FindNeighbors(object=seurat_phase,dims=1:40)
seurat_phase <- FindClusters(object=seurat_phase,resolution=c(0.4,0.6,0.8,1,1.2,1.4))
plots <- NA
for (val in c(0.3,0.4,0.6,0.8,1,1.2,1.4)){
Idents(object=seurat_phase) <- paste("RNA_snn_res.",as.character(val),sep="")
print(DimPlot(seurat_phase,reduction='umap',group.by='ident',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
ggsave(paste("plots/clustering_resolution=",val,".png"))
}
#https://hbctraining.github.io/scRNA-seq_online/lessons/08_SC_clustering_quality_control.html
#get identity and sample information to determine cells per cluster
n_cells <- FetchData(seurat_phase,vars=c("ident","orig.ident"))%>%
dplyr::count(ident,orig.ident)%>%
tidyr::spread(ident,n)
n_cells
n_cells <- NA
#https://hbctraining.github.io/scRNA-seq_online/lessons/08_SC_clustering_quality_control.html
#Determine cells per cluster
FetchData(seurat_phase,vars=c("ident","orig.ident"))%>%
dplyr::count(ident,orig.ident)%>%
tidyr::spread(ident,n)
#determine whether they cluster by cell cycle stage
DimPlot(seurat_phase,label=TRUE,split.by="Phase")+NoLegend() #all about the same unsurprisingly
ggsave("plots/clustering_by_cell_cycle.png")
#check if they cluster by other uninteresting sources of variation.
metrics <- c("nUMI","nGene","S.Score","G2M.Score","mitoRatio")
print(FeaturePlot(seurat_phase,reduction="umap",features=metrics,pt.size=0.4,
order=T,min.cutoff="q10",label=T))
ggsave("plots/clustering_by_other_variables.png")
# http://bioconductor.org/books/3.13/OSCA.basic/cell-type-annotation.html
library(celldex)
library(SingleR)
ref <- BlueprintEncodeData()
pred <- SingleR(test = seurat_phase@assays$RNA@data, ref=ref, labels=ref$label.main)
table(pred$labels)
ref
colnames(ref)
ref$label.main
ref$label
colnames(ref)
pred <- SingleR(test = seurat_phase@assays$RNA@data, ref=ref, labels=ref$label.fine)
table(pred$labels)#B and T cells, NK and monocytes - all expected for PBMCs
seurat_phase@meta.data$predicted_celltype <- pred$labels
FeaturePlot(seurat_phase,reduction="umap",features=c("predicted_celltype"),
order=T,min.cutoff='q10',label=T)
DimPlot(seurat_phase,reduction='umap',group.by='predicted_celltype',label=TRUE,label.size=6)+ggtitle("Cell type Identification by SingleR")
?DimPlot
DimPlot(seurat_phase,reduction='umap',group.by='predicted_celltype',label=TRUE,label.size=4)+ggtitle("Cell type Identification by SingleR")
DimPlot(seurat_phase,reduction='umap',group.by='predicted_celltype',label=TRUE,label.size=2)+ggtitle("Cell type Identification by SingleR")
DimPlot(seurat_phase,reduction='umap',group.by='predicted_celltype',label=TRUE,label.size=3)+ggtitle("Cell type Identification by SingleR")
DimPlot(seurat_phase,reduction='umap',group.by='predicted_celltype',label=F)+ggtitle("Cell type Identification by SingleR")
pred <- SingleR(test = seurat_phase@assays$RNA@data, ref=ref, labels=ref$label.main)#label.main for broad cell types, label.fine and label.ont are more detailed
table(pred$labels)#B and T cells, NK and monocytes - all expected for PBMCs
seurat_phase@meta.data$predicted_celltype <- pred$labels
DimPlot(seurat_phase,reduction='umap',group.by='predicted_celltype',label=F)+ggtitle("Main cell type Identification by SingleR")
ggsave("plots/main_automatic_celltype_identification.png")
pred <- SingleR(test = seurat_phase@assays$RNA@data, ref=ref, labels=ref$label.fine)
table(pred$labels)
seurat_phase@meta.data$predicted_celltype <- pred$labels
DimPlot(seurat_phase,reduction='umap',group.by='predicted_celltype',label=F)+ggtitle("Fine cell type Identification by SingleR")
ggsave("plots/finne_automatic_celltype_identification.png")
ggsave("plots/fine_automatic_celltype_identification.png")
Idents(object=seurat_phase) <- paste("RNA_snn_res.",as.character(0.4),sep="")
DimPlot(seurat_phase,reduction='umap',group.by='ident',label=TRUE,label.size=6)+ggtitle("Resolution=0.4 clustering")
temp <-plotScoreHeatmap(pred)#export manually from RStudio
ggsave("plots/celltype_identification_heatmap.png",temp)
tab <- table(Assigned=seurat_phase@meta.data$predicted_celltype, Cluster=seurat_phase@meta.data$RNA_snn_res.0.4)
# Adding a pseudo-count of 10 to avoid strong color jumps with just 1 cell.
library(pheatmap)
temp <- pheatmap(log2(tab+10), angle_col="0",fontsize_row=15,fontsize_col=15,color=colorRampPalette(c("white", "blue"))(101))
ggsave("plots/celltype_cluster_pheatmap.png",temp)
#reminder of what the clustering looked like:
Idents(object=seurat_phase) <- paste("RNA_snn_res.",as.character(1.4),sep="")
DimPlot(seurat_phase,reduction='umap',group.by='ident',label=TRUE,label.size=6)+ggtitle("Resolution=0.4 clustering")
DimPlot(seurat_phase,reduction='umap',group.by='ident',label=TRUE,label.size=6)+ggtitle("Resolution=1.4 clustering")
#score heatmap by cell type
temp <-plotScoreHeatmap(pred)
ggsave("plots/celltype_identification_heatmap.png",temp)
tab <- table(Assigned=seurat_phase@meta.data$predicted_celltype, Cluster=seurat_phase@meta.data$RNA_snn_res.0.4)
# Adding a pseudo-count of 10 to avoid strong color jumps with just 1 cell.
library(pheatmap)
temp <- pheatmap(log2(tab+10), angle_col="0",fontsize_row=15,fontsize_col=15,color=colorRampPalette(c("white", "blue"))(101))
ggsave("plots/celltype_cluster_pheatmap.png",temp)
tab <- table(Assigned=seurat_phase@meta.data$predicted_celltype, Cluster=seurat_phase@meta.data$RNA_snn_res.1.4)
# Adding a pseudo-count of 10 to avoid strong color jumps with just 1 cell.
library(pheatmap)
temp <- pheatmap(log2(tab+10), angle_col="0",fontsize_row=15,fontsize_col=15,color=colorRampPalette(c("white", "blue"))(101))
tab <- table(Assigned=seurat_phase@meta.data$predicted_celltype, Cluster=seurat_phase@meta.data$RNA_snn_res.1.4)
tab
temp <- pheatmap(log2(tab+10), angle_col="0",fontsize_row=15,fontsize_col=15,color=colorRampPalette(c("white", "blue"))(101))
ggsave("plots/celltype_cluster_pheatmap.png",temp)
for (val in c(0.3,0.4,0.6,0.8,1,1.2,1.4,2.0,3.0)){
Idents(object=seurat_phase) <- paste("RNA_snn_res.",as.character(val),sep="")
print(DimPlot(seurat_phase,reduction='umap',group.by='ident',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
ggsave(paste("plots/clustering_resolution=",val,".png"))
}
temp <- pheatmap(log2(tab+10), angle_col="0",fontsize_row=15,fontsize_col=15,color=colorRampPalette(c("white", "blue"))(101))
temp <- pheatmap(log2(tab+10), angle_col="0",fontsize_row=15,fontsize_col=15,color=colorRampPalette(c("white", "blue"))(101))
ggsave("plots/celltype_cluster_pheatmap.png",temp)
ated_celltype <- NA
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(0,2)]="CD4+ T cells"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(1)]="Monocytes"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(3)]="Naive B cells"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(4,5,8)]="CD8+ T cells"
eta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(6)]="NK cells"
seurat_phase@meta.data$annotated_celltype <- NA
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(0,2)]="CD4+ T cells"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(1)]="Monocytes"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(3)]="Naive B cells"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(4,5,8)]="CD8+ T cells"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(6)]="NK cells"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(4,5,8)]="Memory B cells"
DimPlot(seurat_phase,reduction='umap',group.by='annotated_celltype',label=TRUE,label.size=6)+ggtitle("Cluster cell type Annotation")
ggsave("plots/annotated_cluster_cell_types.png")
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(7)]="Memory B cells"
seurat_phase@meta.data$annotated_celltype <- NA
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(0,2)]="CD4+ T cells"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(1)]="Monocytes"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(3)]="Naive B cells"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(4,5,8)]="CD8+ T cells"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(6)]="NK cells"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.1.4 %in% c(7)]="Memory B cells"
DimPlot(seurat_phase,reduction='umap',group.by='annotated_celltype',label=TRUE,label.size=6)+ggtitle("Cluster cell type Annotation")
ggsave("plots/annotated_cluster_cell_types.png")
