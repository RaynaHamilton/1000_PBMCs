#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=500)+annotate(geom="text",x=650,y=1,label="x=500")
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))
ggsave("plots/initial_cell_density.png")
#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=500)+annotate(geom="text",x=650,y=1,label="x=500")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))
ggsave("plots/initial_cell_density.png")
#genes per cell.  should be one peak, usually not bimodal with a shoulder (indicates failure or very different types/proportions of cells)
metadata%>%ggplot(aes(x=nGene))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=190)+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle("Genes per Cell")
#genes per cell.  should be one peak, usually not bimodal with a shoulder (indicates failure or very different types/proportions of cells)
metadata%>%ggplot(aes(x=nGene))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=300)+annotate(geom="text",x=400,y=1,label="x=300")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("Genes per",nrow(pbmcs@meta.data), "Cells"))
#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=500)+annotate(geom="text",x=650,y=1,label="x=500")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))
ggsave("plots/initial_UMI_density.png")
#genes per cell.  should be one peak, usually not bimodal with a shoulder (indicates failure or very different types/proportions of cells)
metadata%>%ggplot(aes(x=nGene))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=300)+annotate(geom="text",x=400,y=1,label="x=300")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("Genes per",nrow(pbmcs@meta.data), "Cells"))
ggsave("plots/initial_gene_density.png")
#novelty score(genes per UMI).  .8 is expected for good quality cells
metadata%>%ggplot(aes(x=log10GenesPerUMI,color=sample,fill=sample))+geom_density(alpha=0.2)+
theme_classic()+ylab("Cell Density")+geom_vline(xintercept=0.80)+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle("Genes per UMI")
#novelty score(genes per UMI).  .8 is expected for good quality cells
metadata%>%ggplot(aes(x=log10GenesPerUMI))+geom_density(alpha=0.2)+
theme_classic()+ylab("Cell Density")+geom_vline(xintercept=0.80)+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle("Genes per UMI")
#novelty score(genes per UMI).  .8 is expected for good quality cells
metadata%>%ggplot(aes(x=log10GenesPerUMI))+geom_density(alpha=0.2)+
theme_classic()+ylab("Cell Density")+geom_vline(xintercept=0.80)+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle("Genes per UMI")
ggsave("plots/initial_genes_per_UMI.png")
ggplot(metadata,aes(x=mitoRatio)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
theme_classic() +
geom_vline(xintercept = 0.2)+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle("Mitochondrial Ratio per cell")
ggplot(metadata,aes(x=mitoRatio)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
theme_classic() +
geom_vline(xintercept = 0.2)+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(aste("Mitochondrial Ratio per",nrow(pbmcs@meta.data), "Cells"))
ggplot(metadata,aes(x=mitoRatio)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
theme_classic() +
geom_vline(xintercept = 0.2)+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("Mitochondrial Ratio per",nrow(pbmcs@meta.data), "Cells"))
ggplot(metadata,aes(x=mitoRatio)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
theme_classic() +
geom_vline(xintercept = 0.2)+annotate(geom="text",x=0.25,y=1,label="x=0.2")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("Mitochondrial Ratio per",nrow(pbmcs@meta.data), "Cells"))
ggsave("plots/initial_mitochondrial_ratio.png")
ggplot(metadata,aes(x=nUMI,y=nGene,color=mitoRatio))+
geom_point()+scale_colour_gradient(low="gray90",high="black")+
stat_smooth(method=lm)+scale_x_log10()+scale_y_log10()+theme_classic()+
geom_vline(xintercept=500)+geom_hline(yintercept=250)
ggplot(metadata,aes(x=nUMI,y=nGene,color=mitoRatio))+
geom_point()+scale_colour_gradient(low="gray90",high="black")+
stat_smooth(method=lm)+scale_x_log10()+scale_y_log10()+theme_classic()+
geom_vline(xintercept=500)+geom_hline(yintercept=250)+ggtitle("Initial nGenes vs nUMIs")
ggplot(metadata,aes(x=nUMI,y=nGene,color=mitoRatio))+
geom_point()+scale_colour_gradient(low="gray90",high="black")+
stat_smooth(method=lm)+scale_x_log10()+scale_y_log10()+theme_classic()+
geom_vline(xintercept=500)+geom_hline(yintercept=250)+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle("Initial nGenes vs nUMIs")
ggsave("plots/initial_nGenes_vs_nUMIs.png")
#filter - adjust these thresholds according to your application
#it is best to consider all metrics, not just one of above in isolation, to avoid excluding viable cells
filtered_seurat <- subset(x=pbmcs,subset=(nUMI>=500)&
(nGene>=300)&(log10GenesPerUMI>0.8)&
(mitoRatio<0.2))
nrow(filtered_seurat@meta.data)
#filter - adjust these thresholds according to your application
#it is best to consider all metrics, not just one of above in isolation, to avoid excluding viable cells
filtered_seurat <- subset(x=pbmcs,subset=(nUMI>=3000)&
(nGene>=1000)&(log10GenesPerUMI>0.8)&
(mitoRatio<0.2))
nrow(filtered_seurat@meta.data)
nrow(filtered_seurat@meta.data)
#filter - adjust these thresholds according to your application
#it is best to consider all metrics, not just one of above in isolation, to avoid excluding viable cells
filtered_seurat <- subset(x=pbmcs,subset=(nUMI>=3000)&
(nGene>=1000)&(log10GenesPerUMI>0.82)&
(mitoRatio<0.2))
nrow(filtered_seurat@meta.data)
#filter - adjust these thresholds according to your application
#it is best to consider all metrics, not just one of above in isolation, to avoid excluding viable cells
filtered_seurat <- subset(x=pbmcs,subset=(nUMI>=3000)&
(nGene>=1500)&(log10GenesPerUMI>0.82)&
(mitoRatio<0.2))
nrow(filtered_seurat@meta.data)
#filter - adjust these thresholds according to your application
#it is best to consider all metrics, not just one of above in isolation, to avoid excluding viable cells
filtered_seurat <- subset(x=pbmcs,subset=(nUMI>=3000)&
(nGene>=2000)&(log10GenesPerUMI>0.82)&
(mitoRatio<0.2))
nrow(filtered_seurat@meta.data)
#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=500)+annotate(geom="text",x=3000,y=1,label="x=500")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))
#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=3000)+annotate(geom="text",x=3100,y=1,label="x=3000")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))
#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=3000)+annotate(geom="text",x=3200,y=1,label="x=3000")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))
#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=3000)+annotate(geom="text",x=3500,y=1,label="x=3000")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))
#UMIs/transcripts per cell - should be above 500
metadata%>%ggplot(aes(x=nUMI))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=3000)+annotate(geom="text",x=4000,y=1,label="x=3000")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("UMIs per",nrow(pbmcs@meta.data), "Cells"))
ggsave("plots/initial_UMI_density.png")
#genes per cell.  should be one peak, usually not bimodal with a shoulder (indicates failure or very different types/proportions of cells)
metadata%>%ggplot(aes(x=nGene))+geom_density(alpha=0.2)+
scale_x_log10()+theme_classic()+ylab("Cell Density")+geom_vline(xintercept=2000)+annotate(geom="text",x=2500,y=1,label="x=2000")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("Genes per",nrow(pbmcs@meta.data), "Cells"))
ggsave("plots/initial_gene_density.png")
#novelty score(genes per UMI).  .8 is expected for good quality cells
metadata%>%ggplot(aes(x=log10GenesPerUMI))+geom_density(alpha=0.2)+
theme_classic()+ylab("Cell Density")+geom_vline(xintercept=0.82)+annotate(geom="text",x=83,y=1,label="x=82")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle("Genes per UMI")
#novelty score(genes per UMI).  .8 is expected for good quality cells
metadata%>%ggplot(aes(x=log10GenesPerUMI))+geom_density(alpha=0.2)+
theme_classic()+ylab("Cell Density")+geom_vline(xintercept=0.82)+annotate(geom="text",x=.83,y=1,label="x=82")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle("Genes per UMI")
#novelty score(genes per UMI).  .8 is expected for good quality cells
metadata%>%ggplot(aes(x=log10GenesPerUMI))+geom_density(alpha=0.2)+
theme_classic()+ylab("Cell Density")+geom_vline(xintercept=0.82)+annotate(geom="text",x=.83,y=5,label="x=82")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle("Genes per UMI")
ggsave("plots/initial_genes_per_UMI.png")
ggplot(metadata,aes(x=mitoRatio)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
theme_classic() +
geom_vline(xintercept = 0.2)+annotate(geom="text",x=0.25,y=1,label="x=0.2")+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle(paste("Mitochondrial Ratio per",nrow(pbmcs@meta.data), "Cells"))
ggsave("plots/initial_mitochondrial_ratio.png")
ggplot(metadata,aes(x=nUMI,y=nGene,color=mitoRatio))+
geom_point()+scale_colour_gradient(low="gray90",high="black")+
stat_smooth(method=lm)+scale_x_log10()+scale_y_log10()+theme_classic()+
geom_vline(xintercept=500)+geom_hline(yintercept=250)+
theme(plot.title=element_text(hjust=0.5,face="bold"))+ggtitle("Initial nGenes vs nUMIs")
ggsave("plots/initial_nGenes_vs_nUMIs.png")
#filter - adjust these thresholds according to your application
#it is best to consider all metrics, not just one of above in isolation, to avoid excluding viable cells
filtered_seurat <- subset(x=pbmcs,subset=(nUMI>=3000)&
(nGene>=2000)&(log10GenesPerUMI>0.82)&
(mitoRatio<0.2))
nrow(filtered_seurat@meta.data)
print(paste(nrow(filterd_seurat@meta.data),"cells of 1000 cells expected."))
print(paste(nrow(filtered_seurat@meta.data),"cells of 1000 cells expected."))
#remove genes with 0 counts so they don't reduce average expression
counts <- GetAssayData(object=filtered_seurat,slot="counts")
nonzero <- counts>0
#remove genes expressed in 10 or fewer cells
keep_genes <- Matrix::rowSums(nonzero)>=10
filtered_counts <- counts[keep_genes,]
filtered_seurat <- CreateSeuratObject(filtered_counts,meta.data=filtered_seurat@meta.data)
save(filtered_seurat, file="data/seurat_filtered.RData")
library(Seurat)
library(tidyverse)
library(RCurl)
library(cowplot)
library(AnnotationHub)
#filtered_seurat <- load("data/seurat_filtered.RData")
load("data/cycle.rda")
seurat_phase <- NormalizeData(filtered_seurat) #log normalization
#note # of PCs=# of cells
#before PCA we must scale the data since by default the most expressed genes will
#be the most variable otherwise
#find most variable genes
seurat_phase <- FindVariableFeatures(seurat_phase,selection.method="vst",
nfeatures=2000,verbose=FALSE)
#scale counts
seurat_phase <- ScaleData(seurat_phase)
#now PCA...
seurat_phase <- RunPCA(seurat_phase)
DimPlot(seurat_phase,reduction="pca",group.by="Phase",split.by="Phase")
View(seurat_phase)
View(Seurat_phase@meta.data)
View(seurat_phase@meta.data)
seurat_phase <- NormalizeData(filtered_seurat) #log normalization
seurat_phase <- CellCycleScoring(seurat_phase,g2m.features=g2m_genes,
s.features=s_genes)
#note # of PCs=# of cells
#before PCA we must scale the data since by default the most expressed genes will
#be the most variable otherwise
#find most variable genes
seurat_phase <- FindVariableFeatures(seurat_phase,selection.method="vst",
nfeatures=2000,verbose=FALSE)
#scale counts
seurat_phase <- ScaleData(seurat_phase)
#now PCA...
seurat_phase <- RunPCA(seurat_phase)
DimPlot(seurat_phase,reduction="pca",group.by="Phase",split.by="Phase")
#Could regress out cell cycle, but it seems a bit unecessary here
ggsave("plots/cell_cycle_PCA.png")
#deciding whether to regress out mitochondrial expression...
summary(seurat_phase@meta.data$mitoRatio)
#now cut based on quartile values
seurat_phase@meta.data$mitoFr <- cut(seurat_phase@meta.data$mitoRatio,
breaks=c(-Inf,0.05687,0.06696,0.07946,Inf),
labels=c("Low","Medium","Medium high","High"))
DimPlot(seurat_phase,reduction="pca",group.by="mitoFr",split.by="mitoFr")
#wow those look exactly the same
ggsave("plots/mitoRatio_PCA.png")
DimPlot(seurat_phase,reduction="pca",group.by="mitoFr",split.by="mitoFr")+ggtitle("MitoRatio")
DimPlot(seurat_phase,reduction="pca",group.by="mitoFr",split.by="mitoFr")+ggtitle("PCA plot by Mitochondrial Ratio")
#wow those look exactly the same
ggsave("plots/mitoRatio_PCA.png")
DimPlot(seurat_phase,reduction="pca",group.by="Phase",split.by="Phase")+ggtitle("PCA plot by Cell Cycle Phase")
#regress out nothing tbh
split_seurat$ctrl@assays#top 10 variable features
#regress out nothing tbh
seurat_phasel@assays#top 10 variable features
#regress out nothing tbh
seurat_phase@assays#top 10 variable features
saveRDS(split_seurat, "data/seurat_post_PCA.rds")
saveRDS(seurat_phase, "data/seurat_post_PCA.rds")
#https://hbctraining.github.io/scRNA-seq_online/lessons/06_integration.html
#integration using 3000 most variable genes
integ_features <- SelectIntegrationFeatures(object.list=split_seurat,
nfeatures=3000)
#https://hbctraining.github.io/scRNA-seq_online/lessons/06_integration.html
#integration using 3000 most variable genes
integ_features <- SelectIntegrationFeatures(object.list=seurat_phase,
nfeatures=3000)
#seurat_integrated <- readRDS("./results/integrated_seurat.rds")
#heatmap to help determine how many PCs to use when differentiating cell types
DimHeatmap(seurat_phase,dims=1:9,cells=500,balanced=TRUE)
#cells is nunmber of cells with the most negative or positive scores to use
## Printing out the most variable genes driving PCs
print(x=seurat_integrated[["pca"]],dims=1:10,nfeatures=5)
#cells is nunmber of cells with the most negative or positive scores to use
## Printing out the most variable genes driving PCs
print(x=seurat_phase[["pca"]],dims=1:10,nfeatures=5)
#seurat_phase <- readRDS("./results/integrated_seurat.rds")
#heatmap to help determine how many PCs to use when differentiating cell types
DimHeatmap(seurat_phase,dims=1:9,cells=500,balanced=TRUE)
?DimHeatmap
ggsave("plots/PCA_heatmap.png")
#seurat_phase <- readRDS("./results/integrated_seurat.rds")
#heatmap to help determine how many PCs to use when differentiating cell types
DimHeatmap(seurat_phase,dims=1:9,cells=500,balanced=TRUE)
ggsave("plots/PCA_heatmap.png")
#seurat_phase <- readRDS("./results/integrated_seurat.rds")
#heatmap to help determine how many PCs to use when differentiating cell types
DimHeatmap(seurat_phase,dims=1:9,cells=500,balanced=TRUE,fast=FALSE)
ggsave("plots/PCA_heatmap.png")
#seurat_phase <- readRDS("./results/integrated_seurat.rds")
#heatmap to help determine how many PCs to use when differentiating cell types
DimHeatmap(seurat_phase,dims=1:9,cells=500,balanced=TRUE,fast=FALSE)
#seurat_phase <- readRDS("./results/integrated_seurat.rds")
#heatmap to help determine how many PCs to use when differentiating cell types
DimHeatmap(seurat_phase,dims=1:9,cells=500,balanced=TRUE,fast=FALSE)+theme(text = element_text(size = 20))
#seurat_phase <- readRDS("./results/integrated_seurat.rds")
#heatmap to help determine how many PCs to use when differentiating cell types
DimHeatmap(seurat_phase,dims=1:9,cells=500,balanced=TRUE,fast=FALSE)+theme(text = element_text(size = 10))
#seurat_phase <- readRDS("./results/integrated_seurat.rds")
#heatmap to help determine how many PCs to use when differentiating cell types
DimHeatmap(seurat_phase,dims=1:9,cells=500,balanced=TRUE,fast=FALSE)+theme(text = element_text(size = 1))
#seurat_phase <- readRDS("./results/integrated_seurat.rds")
#heatmap to help determine how many PCs to use when differentiating cell types
DimHeatmap(seurat_phase,dims=1:9,cells=500,balanced=TRUE,fast=FALSE)+theme(axis.text.y = element_text(size = 1))
#seurat_phase <- readRDS("./results/integrated_seurat.rds")
#heatmap to help determine how many PCs to use when differentiating cell types
DimHeatmap(seurat_phase,nfeatures=20,dims=1:9,cells=500,balanced=TRUE,fast=FALSE)+theme(axis.text.y = element_text(size = 1))
ggsave("plots/PCA_heatmap.png")
#can also use elbow plot to identify variation threshold
ElbowPlot(object=seurat_phase,ndims=40)
#finnd neighbours, then graph-based clusters
#resolution between .4 and 1.4 is good for 3000-5000 cells, try a few values
seurat_phase <- FindNeighbors(object=seurat_phase,dims=1:40)
seurat_phase <- FindClusters(object=seurat_phase,resolution=c(0.4,0.6,0.8,1,1.2,1.4))
plots=data.frame()
seurat_phase@meta.data%>%View()
for (val in c(0.4,0.6,0.8,1,1.2,1.4)){
Idents(object=seurat_phase) <- paste("integrated_snn_res.",as.character(val),sep="")
print(DimPlot(seurat_phase,reduction='umap',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
}
seurat_phase@meta.data%>%View()
seurat_phase <- RunUMAP(seurat_phase,
dims = 1:40,
reduction = "pca")
#finnd neighbours, then graph-based clusters
#resolution between .4 and 1.4 is good for 3000-5000 cells, try a few values
seurat_phase <- FindNeighbors(object=seurat_phase,dims=1:40)
seurat_phase <- FindClusters(object=seurat_phase,resolution=c(0.4,0.6,0.8,1,1.2,1.4))
plots=data.frame()
seurat_phase@meta.data%>%View()
for (val in c(0.4,0.6,0.8,1,1.2,1.4)){
Idents(object=seurat_phase) <- paste("integrated_snn_res.",as.character(val),sep="")
print(DimPlot(seurat_phase,reduction='umap',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
}
for (val in c(0.1,2,5)){
Idents(object=seurat_phase) <- paste("integrated_snn_res.",as.character(val),sep="")
print(DimPlot(seurat_phase,reduction='umap',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
}
for (val in c(100)){
Idents(object=seurat_phase) <- paste("integrated_snn_res.",as.character(val),sep="")
print(DimPlot(seurat_phase,reduction='umap',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
}
for (val in c(0.01)){
Idents(object=seurat_phase) <- paste("integrated_snn_res.",as.character(val),sep="")
print(DimPlot(seurat_phase,reduction='umap',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
}
for (val in c(0.0001)){
Idents(object=seurat_phase) <- paste("integrated_snn_res.",as.character(val),sep="")
print(DimPlot(seurat_phase,reduction='umap',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
}
?DimPlot
print(DimPlot(seurat_phase,reduction='umap',cols= paste("integrated_snn_res.",as.character(val),sep=""),label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
for (val in c(0.4,0.6,0.8,1,1.2,1.4)){
Idents(object=seurat_phase) <- paste("integrated_snn_res.",as.character(val),sep="")
print(DimPlot(seurat_phase,reduction='umap',group.by='ident',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
}
View(seurat_phase@meta.data)
seurat_phase@meta.data%>%View()
for (val in c(0.4,0.6,0.8,1,1.2,1.4)){
Idents(object=seurat_phase) <- paste("RNA_snn_res.",as.character(val),sep="")
print(DimPlot(seurat_phase,reduction='umap',group.by='ident',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
}
#CD14 monocyte markers-about 0,3,10 if you ask me
FeaturePlot(seurat_phase,reduction="umap",features=c("CD14","LYZ"),
order=T,min.cutoff="q10",label=T)
#FCGR3A+ monocyte markers
FeaturePlot(seurat_phase,reduction="umap",features=c("FCGR3A","MS4A7"),
order=T,min.cutoff='q10',label=T)
#macrophages - not cleraly present, maybe negatively selected for in cell culture
FeaturePlot(seurat_phase,
reduction = "umap",
features = c("MARCO", "ITGAM", "ADGRE1"),
order = TRUE,
min.cutoff = 'q10',
label = TRUE)
for (val in c(0.4,0.6,0.8,1,1.2,1.4)){
Idents(object=seurat_phase) <- paste("RNA_snn_res.",as.character(val),sep="")
print(DimPlot(seurat_phase,reduction='umap',group.by='ident',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
ggsave(paste("plots/clustering_resolution=",val,".png"))
}
#Idents(object=seurat_phase) <- paste("integrated_snn_res.",as.character(1.0),sep="")
#https://hbctraining.github.io/scRNA-seq_online/lessons/08_SC_clustering_quality_control.html
#get identity and sample information to determine cells per cluster
n_cells <- FetchData(seurat_phase,vars=c("ident","orig.ident"))%>%
dplyr::count(ident,orig.ident)%>%
tidyr::spread(ident,n)
View(n_cells)
# UMAP of cells in each cluster by sample
DimPlot(seurat_phase,
label = TRUE,
split.by = "sample")  + NoLegend()#good results, we expected similar control and stimatuled plots for this experimennt
# UMAP of cells in each cluster by sample
DimPlot(seurat_phase,
label = TRUE)  + NoLegend()#good results, we expected similar control and stimatuled plots for this experimennt
#determine whether they cluster by cell cycle stage
DimPlot(seurat_phase,label=TRUE,split.by="Phase")+NoLegend() #all about the same thankfully, almost like I regressed that out
ggsave("plots/clustering_by_cell_cycle.png")
#check if they cluster by other uninteresting sources of variation.
metrics <- c("nUMI","nGene","S.Score","G2M.Score","mitoRatio")
print(FeaturePlot(seurat_phase,reduction="umap",features=metrics,pt.size=0.4,
order=T,min.cutoff="q10",label=T))
ggsave("plots/clustering_by_other_variables.png")
#determine how different PCs explain the clusters
columns <- c(paste0("PC_",1:16),"ident","UMAP_1","UMAP_2")
pc_data <- FetchData(seurat_phase,vars=columns)
umap_label <- FetchData(seurat_phase,vars=c("ident","UMAP_1","UMAP_2"))%>%
group_by(ident)%>%summarize(x=mean(UMAP_1),y=mean(UMAP_2))
#now plot the UMAPs for each PC
map(paste0("PC_",1:16),function(pc){
ggplot(pc_data,aes(UMAP_1,UMAP_2))+
geom_point(aes(color=pc),alpha=0.7)+
scale_color_gradient(guide=F,low="grey90",high="blue")+
geom_text(data=umap_label,aes(label=ident,x,y))+ggtitle(pc)
})%>%plot_grid(plot_list=.)
# https://hbctraining.github.io/scRNA-seq_online/lessons/08_SC_clustering_quality_control.html has list of cell types and markers
# theese genes may not all be in data since only 3000 most variable are present
DefaultAssay(seurat_phase) <- "RNA"
markers <- FindAllMarkers(object = seurat_phase, only.pos = TRUE,ogfc.threshold = 0.25)
print(markers%>%group_by(cluster)%>% do(head(., n = 3)),n=100)
# http://bioconductor.org/books/3.13/OSCA.basic/cell-type-annotation.html
library(celldex)
ref <- BlueprintEncodeData()
library(SingleR)
ref <- BlueprintEncodeData()
ref
pred <- SingleR(test = seurat_phase@assays$RNA@data, ref=ref, labels=ref$label.main)
table(pred$labels)
pred$labels
seurat_phase@meta.data$predicted_celltype <- pred$labels
FeaturePlot(seurat_phase,reduction="umap",features=c("predicted_celltype"),
order=T,min.cutoff='q10',label=T)
?FeaturePlot
print(DimPlot(seurat_phase,reduction='umap',group.by='predicted_celltype",label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
print(DimPlot(seurat_phase,reduction='umap',group.by='predicted_celltype',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
print(DimPlot(seurat_phase,reduction='umap',group.by='predicted_celltype',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
print(DimPlot(seurat_phase,reduction='umap',group.by='predicted_celltype',label=FALSE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
DimPlot(seurat_phase,reduction='umap',group.by='predicted_celltype',label=FALSE,label.size=6)+ggtitle("Cell type Identification by SingleR")
ggsave("plots/automatic_celltype_identification.png")
DimPlot(seurat_phase,reduction='umap',group.by='ident',label=TRUE,label.size=6)+ggtitle("Resolution=1.4 clusterinng")
DimPlot(seurat_phase,reduction='umap',group.by='ident',label=TRUE,label.size=6)+ggtitle("Resolution=1.4 clustering")
for (val in c(0.1,0.2,0.4,0.6,0.8,1,1.2,1.4)){
Idents(object=seurat_phase) <- paste("RNA_snn_res.",as.character(val),sep="")
print(DimPlot(seurat_phase,reduction='umap',group.by='ident',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
ggsave(paste("plots/clustering_resolution=",val,".png"))
}
for (val in c(0.2,0.4,0.6,0.8,1,1.2,1.4)){
Idents(object=seurat_phase) <- paste("RNA_snn_res.",as.character(val),sep="")
print(DimPlot(seurat_phase,reduction='umap',group.by='ident',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
ggsave(paste("plots/clustering_resolution=",val,".png"))
}
for (val in c(0.3,0.4,0.6,0.8,1,1.2,1.4)){
Idents(object=seurat_phase) <- paste("RNA_snn_res.",as.character(val),sep="")
print(DimPlot(seurat_phase,reduction='umap',group.by='ident',label=TRUE,label.size=6)+ggtitle(paste("Resolution=",as.character(val),sep="")))
ggsave(paste("plots/clustering_resolution=",val,".png"))
}
DimPlot(seurat_phase,reduction='umap',group.by='ident',label=TRUE,label.size=6)+ggtitle("Resolution=0.4 clustering")
fcm(seurat_phase@meta.data$RNA_snn_res.0.4,seurat_phase@meta.data$predicted_celltype)
temp <- Data.Frame(seurat_phase@meta.data$RNA_snn_res.0.4,seurat_phase@meta.data$predicted_celltype)
temp <- data.frame(seurat_phase@meta.data$RNA_snn_res.0.4,seurat_phase@meta.data$predicted_celltype)
library(cooccur)
install.packages('cooccur')
library(cooccur)
cooccur(temp)
DimPlot(seurat_phase,reduction='umap',group.by='predicted_celltype',label=FALSE,label.size=6)+ggtitle("Cell type Identification by SingleR")
seurat_phase@meta$data$annotated_celltype[seurat_phase@meta.$RNA_snn_res.0.4 %in% c(3,4)]="B cells"
seurat_phase@meta$data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.0.4 %in% c(3,4)]="B cells"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.0.4 %in% c(3,4)]="B cells"
View(seurat_phase@meta.data)
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.0.4 %in% c(0,7)]="Monocytes"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.0.4 ==5]="NK cells"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.0.4 %in% c(2,8)]="CD8+ T cells"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.0.4 ==1]="CD4+ T cells"
seurat_phase@meta.data$annotated_celltype[seurat_phase@meta.data$RNA_snn_res.0.4 %in% c(2,8,6)]="CD8+ T cells"
DimPlot(seurat_phase,reduction='umap',group.by='annotated_celltype',label=TRUE,label.size=6)+ggtitle("Cluster cell type Annotation")
DimPlot(seurat_phase,reduction='umap',group.by='predicted_celltype',label=TRUE,label.size=6)+ggtitle("Cell type Identification by SingleR")
ggsave("plots/annotated_cluster_cell_types.png")
plotScoreHeatmap(pred)
plotScoreHeatmap(pred)+ggtitle("1000 PBMCs Cell Identification Scores")
ggsave("plots/celltype_identification_heatmap.png")
?plotScoreHeatmap
ggsave("plots/celltype_identification_heatmap.png",fast=FALSE)
plotScoreHeatmap(pred,fast=FALSE)
ggsave("plots/celltype_identification_heatmap.png")
tab <- table(Assigned=seurat_phase@meta.data$annotated_celltype, Cluster=seurat_phase@meta.data$RNA_snn_res.0.4)
# Adding a pseudo-count of 10 to avoid strong color jumps with just 1 cell.
library(pheatmap)
pheatmap(log2(tab+10), color=colorRampPalette(c("white", "blue"))(101))
pheatmap(log2(tab+10), color=colorRampPalette(c("white", "blue"))
pheatmap(log2(tab+10), color=colorRampPalette(c("white", "blue")))
(101))
pheatmap(log2(tab+10), color=colorRampPalette(c("white", "blue"))(101))
?pheatmap
pheatmap(log2(tab+10), color=colorRampPalette(c("white", "blue"),angle_col = "0")(101))+
pheatmap(log2(tab+10), color=colorRampPalette(c("white", "blue")),angle_col = "0")(101))+
pheatmap(log2(tab+10), color=colorRampPalette(c("white", "blue")),angle_col = "0")
pheatmap(log2(tab+10), color=colorRampPalette(c("white", "blue"))(101))+
pheatmap(log2(tab+10), color=colorRampPalette(c("white", "blue"))(101))
pheatmap(log2(tab+10), angle_col="0",color=colorRampPalette(c("white", "blue"))(101))
pheatmap(log2(tab+10), angle_col="0",fontsize_row=20,fontsize_col=20,color=colorRampPalette(c("white", "blue"))(101))
pheatmap(log2(tab+10), angle_col="0",fontsize_row=10,fontsize_col=10,color=colorRampPalette(c("white", "blue"))(101))
pheatmap(log2(tab+10), angle_col="0",fontsize_row=15,fontsize_col=15,color=colorRampPalette(c("white", "blue"))(101))
ggsave("plots/celltype_cluster_pheatmap.png")
temp <- pheatmap(log2(tab+10), angle_col="0",fontsize_row=15,fontsize_col=15,color=colorRampPalette(c("white", "blue"))(101))
ggsave(temp,"plots/celltype_cluster_pheatmap.png")
ggsave("plots/celltype_cluster_pheatmap.png",temp)
ggsave("plots/celltype_identification_heatmap.png",temp)
temp <-plotScoreHeatmap(pred)#export manually from RStudio
ggsave("plots/celltype_identification_heatmap.png",temp)
DimPlot(seurat_phase,reduction='umap',group.by='annotated_celltype',label=TRUE,label.size=6)+ggtitle("Cluster cell type Annotation")
# http://bioconductor.org/books/3.13/OSCA.basic/cell-type-annotation.html
library(celldex)
library(SingleR)
library(Seurat)
library(tidyverse)
library(RCurl)
library(cowplot)
DimPlot(seurat_phase,reduction='umap',group.by='annotated_celltype',label=TRUE,label.size=6)+ggtitle("Cluster cell type Annotation")
ggsave("plots/annotated_cluster_cell_types.png")
View(ref)
View
View(seurat_phase@meta.data)
Idents(object=seurat_phase) <- paste("RNA_snn_res.",as.character(0.4),sep="")
DimPlot(seurat_phase,reduction='umap',group.by='ident',label=TRUE,label.size=6)+ggtitle("Resolution=0.4 clustering")
FindMarkers(seurat_phase,group.by=RNA_snn_res.0.4,ident.1="6",ident.2="2")
FindMarkers(seurat_phase,group.by=seurat_phase@meta.data$RNA_snn_res.0.4,ident.1="6",ident.2="2")
cluster_2_vs_6 <- FindMarkers(seurat_phase,group.by=seurat_phase@meta.data$RNA_snn_res.0.4,ident.1="6",ident.2="2")
View(cluster_2_vs_6)
cluster_2_vs_6$gene <- rownames(cluster_2_vs_6)
FetchData(seurat_phase)
?FetchData
View(seurat_phase@assays$RNA@data)
FetchData(seurat_phase,"ITGB2")
